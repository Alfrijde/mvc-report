{% extends "base.html.twig" %}

{% block title %}Me{% endblock %}

{% block body %}
<div class="main">
    <h1>Mätningar</h1>

<h2>Aktuella mätningar</h2>
<img src="https://scrutinizer-ci.com/g/Alfrijde/mvc-report/badges/quality-score.png?b=main">
<img src="https://scrutinizer-ci.com/g/Alfrijde/mvc-report/badges/coverage.png?b=main">
<img src="https://scrutinizer-ci.com/g/Alfrijde/mvc-report/badges/build.png?b=main">
<img src="https://scrutinizer-ci.com/g/Alfrijde/mvc-report/badges/code-intelligence.svg?b=main">


<h2>Introduktion</h2>
<p>•	Codestyle <br>
Code style innebär hur koden är skriven. Man kan skriva på olika sätt men det viktiga är att vara konstant i hur man valt att skriva. Det kan vara variablernas namn, intendering i koden, om kommentarer ska skrivas och i så fall hur.  
<br>
•	Coverage
<br>
Coverage har med kodens testtäckning att göra, hur mycket av koden täcks av testfall. Ju mer komplex koden är desto mer svår testad är den och testningen blir inte lika heltäckande, alternativt så blir det väldigt många olika test på samma funktion. 
<br>
•	Complexity
<br>
Hur komplex koden är. Till exempel hur många if-statser en funktion innehåller påverkar komplexiteten. Desto fler vägar och olika utfall en funktion har desto komplexare blir den.
Mina mest komplexa kodrader ligger i DeckOfCards-klassen och CardHand-klassen. De har med att blanda kortleken och räkna ut värdet på korthanden. Båda kodsnuttarna innebär att räkna ut hur många kort det finns och vilka värden som redan finns och göra val baserat på det och då kan det snabbt bli komplicerat med olika utfall.
<br>
•	Cohesion
<br>
Cohesion avser hur funktionerna och datan inuti en klass fungerar ihop. Om det finns bra flöde inuti klassen och funktionerna passar för den data som finns inuti klassen.
<br>
•	Coupling
<br>
Coupling innebär hur klasser och moduler arbetar tillsammans. Om det finns för många kopplingar mellan klasser kan det bli svårt att underhålla en kod då en liten ändring i en klass kan ha stor påverkan på en annan klass som ärver från eller är mycket beroende av en annan klass.
Till exempel är controllers beroende av många andra klasser för att de ska dunka. Min DiceController tar in 8 andra klasser för att funka. Detta är inte så konstigt då det är en controller med massa router som ska knyta ihop många olika delar, men det gör det också till en stor och svår testad del. 
<br>
•	CRAP
<br>
Ett system som mäter hur svår koden är att underhålla och testa. Ju mer komplex koden är och väl den är testad. Om en kod är svår och komplex så kan den ändå få en låg CRAP score om den är väl testad.
Mina koder med högst CRAP score ligger i Controllerklasser, det är mycket som händer i dem vilket gör dem svåra och testa. Jag har inte heller gjort ett enda test på dem så poängen skulle nog gå ner om jag utförde några test på just de funktionerna.
<p>
<h2>PHPMetrics</h2>
<p>När jag tittar på rapporten från phpmetrics så finns det 7 violations men inga erros. Det som verkar mest problematiskt är maintainabilityn på de stora filerna som samtidigt har en stor komplexitet. 
<br> Främst är det Controllers som är stor och komplexa och det får höga siffror när det gäller komplexitet och det gör dem svåra att underhålla. Jag tänker att jag kan prova att göra några test på controllern för DiceGame och Library som har de högsta sifforna. Kanske även skriva lite kommentarer för att öka underhållningspoängen. 
<br> Jag har ett error gällande en God-class som är från en övning, den måste jag kolla närmare på om jag kan rätta till alternativ t om den ens behöver vara kvar.
<br> Så i sammanfattning: Jag behöver öka min maintainability, göra några test på controllers med höga komplexitetpoäng och se över filer som ligger påverkar poäng negativt som eventuellt inte behöver vara kvar i mitt repo.
</p>
<h2>Scrutinizer</h2>
<p>I scrutinizer fick jag 10 på min kod vid första uppladdningen. Så här blir väl utmaningen att behålla det medan jag uppdaterar delar av koden. 
<br> Det finns 11 issues att fixa till varav 3 major och 3 minor, så de tänker jag få bukt med sp det inte finns några större fel i koden. Jag har låg test coverage i min kod totalt men har 100 % i mina egna klasser Dice och Card, Jag tänker att det skulle vara bra att komma upp i oranget område för coverage i alla fall eftersom allt annat ser bra ut.
</p>
<h2>Förbättringar</h2>
<p>Dessa förbättringar tänkte jag genomföra: <br>
•	Rätta till de issues som kom upp i scrutinizer <br>
Här ska jag försöka få bort alla issues för en snyggare kod och behålla nivå 10 på min kod i scrutinizer. Det skulle vara skönt att få bort alla issues så det är en clean slate att börja jobba med inför projektet.
<br>
•	Förbättra kodtäckningen till orange status
<br>
När alla andra fält är gröna så känns det extra mycket med en röd badge i kodtäckning. Det kommer också förhoppningsvis öka maintainiblityn och komplexitet som också är ett problem i phphmetrics.
<br>
•	Försöka förbättra maintainabilityn i klasserna
<br>
Här tänker jag försöka sänka komplexiteten med testningar och att skriva mer kommentarer i klasserna, särskilt i Controller-klasserna. Det borde sänka poängen och samtidigt knyta ihop med det föregående målet.
</p>

<h2>Efter förbättringar</h2>
<h3>PHPMetrics</h3>

<p>Här lyckades jag få upp maintainabilityn på klasserna som var röda. Nu är alla antingen gula eller gröna. Jag trodde testerna skulle hjälpa lite mer att också få ner komplexiteten, men jag kunde tyvärr inte testa de mest komplexa metoderna i Controllersarna så det hjälpte inte så mycket. Något som verkligen fungerade var att kommentera koden, då blev filerna genast gula i stället för röda.  Jag fick bort två violations, det var två God-objects som var för kraftfulla och hade för många funktioner och tog in alldeles för många klasser. Den ena gjorde jag mig av med, det var en fil från en övning som jag inte kände att jag behövde ha kvar. Den andra var en Controller som jag delade upp i två i stället för en stor. </p>


        <a href="{{ asset('img/Skärmbild 2024-05-15 1509045.png') }}">
            <img src="{{ asset('img/Skärmbild 2024-05-15 1509045.png') }}" alt="" height="300"> 
        </a>
                <a href="{{ asset('img/Skärmbild 2024-05-17 155604.png') }}">
            <img src="{{ asset('img/Skärmbild 2024-05-17 155604.png') }}" alt="" height="300"> 
        </a>

<h3>Scrutinizer</h3>
<p>Här fick jag bort alla issues dom påverkade mina filer. Jag lyckades introducera några nya längs vägen men fick också bort dem.
<br> Jag lyckades inte med min önskan om att få över 40% kodtäckning, den landade på 32% vilket är en klar förbättring. Problemet är alla Controller-filerna som är stora och svåra att testa. Jag hade tester som fungerade lokalt för LibraryControllerna men som inte fungerade när de laddades upp i Scrutinzer jag tror det blev något konstigt med sql-filen och sökvägen till den. Vilket är konstigt eftersom det fungerar när jag laddade upp den på studetnservern. Men Det är i alla fall en klar förbättring i kodtäckningen, jag lärde mig hur jag kan göra enkla tester på Controllers så det var bra.
</p>

        <a href="{{ asset('img/Skärmbild 2024-05-15 163435.png') }}">
            <img src="{{ asset('img/Skärmbild 2024-05-15 163435.png') }}" alt="" width="700">
        </a>
                <a href="{{ asset('img/Skärmbild 2024-05-17 160116.png') }}">
            <img src="{{ asset('img/Skärmbild 2024-05-17 160116.png') }}" alt="" width="700">
        </a>

<h2>Diskussion</h2>
<p>
•	Kan man aktivt jobba med kodkvalitet och “clean code” på detta sättet? <br>
Ja, jag tror det blir bättre om man har dessa verktyg från början så man kan se vart koden har svagheter från början. Om man använder det i slutet på projektet så kan det vara för sent att ändra vissa saker utan att behöva skriva allt för mycket kod. Verktygen hjälper verkligen att se sin kod på ett nyttssätt och visa det tydligt med visuella medel. Man vill ju jobba mot så mycket grönt som möjligt, det är väldigt tillfredställande.
<br>
•	Finns det fördelar och kanske nackdelar?
<br>
Koden blir snyggare och jag tycker att jag fick en tankeställare att komma ihåg att kommentera ordentligt och en påminnelse om att dela upp alltför stora kodfiler i mindre bitar. 
Nackdelar kan vara att man kanske fastnar i ett fixa små problem som inte har så stor påverkan på koden och att det kan ta tid från andra viktigare delar av projektet. Å andra sidan så är det enklare att jobba med en snyggare kod överhuvudtaget.
<br>
•	Ser du andra möjligheter att jobba mot “clean code”?
<br>
Jag tror koden blir snyggare och att man blir en bättre programmera genom att försöka ha det så snyggt och prydligt som möjligt. Jag tror också man blir en trevligare kollega att jobba med om man skriver en snygg och tydlig kod som flera lätt kan läsa och jobba vidare med.
</p>
</div>
{% endblock %}